// Импорт пространства имен System, которое содержит основные классы и базовые классы.
using System;
// Импорт пространства имен System.IO, которое содержит типы, позволяющие чтение и запись в файлы и потоки данных.
using System.IO;
// Импорт пространства имен System.Security, которое содержит классы, обеспечивающие поддержку безопасности.
using System.Security;
// Импорт всех статических членов класса AlgoritmViginer, чтобы они могли быть использованы без указания имени класса.
using static AlgoritmViginer;

// Объявление класса Program.
class Program
{
    // Ключ шифрования
    static string privateKey = "ABC";

    // Точка входа в программу
    static void Main()
    {
        // Проверка существования файла и создание его при необходимости.
        if (!File.Exists("PASS.TXT"))
        {
            File.Create("PASS.TXT").Close();
        }
        // Бесконечный цикл, который продолжается до тех пор, пока пользователь не введет "0"
        while (true)
        {
            // Приглашение для определения поведения программы
            Console.Write("Введите 1 для входа, 2 для регистрации или 0 для выхода: ");
            // "?" потому что, допускаем что может быть введено значение null
            string? choice = Console.ReadLine();
            // Если введено 1, то выполняем вход
            if (choice == "1")
            {
                // Функция входа в приложение
                Login();
            }
            // Если введено 2, то выполняем регистрацию
            else if (choice == "2")
            {
                // Функция регистрации в приложении
                Register();
                // После регистрации предлагаем войти
                Console.Write("Теперь вы можете войти в свой аккаунт.\n");
                // Переходим на следующую итерацию цикла где запрашиваем что желает сделать пользователь
                continue;
            }
            // Если введено 0, то завершаем программу
            else if (choice == "0")
            {
                // Выходим из цикла и завершаем программу
                return;
            }
            // Иначе выводим сообщение об ошибке
            else
            {
                Console.WriteLine("Ошибка! Неизвестный вариант ввода. Повторите попытку.\n");
            }
        }
    }

    // Метод для входа пользователя.
    static void Login()
    {
        // Вывод запроса на ввод логина.
        Console.Write("Введите логин: ");
        // Чтение логина, введенного пользователем. "?" потому что, 
        // допускаем что может быть введено значение null
        string? login = Console.ReadLine();
        // Если введено null или пустая строка - повтор ввода
        if (login == null || login == "")
        {
            // Вывод сообщения о том, что логин не найден.
            Console.WriteLine("Ошибка! Некорректный логин, убедитесь, что вы корректно заполнили поле ввода.\n");
            // Завершение метода.
            return;
        }

        // Чтение всех строк из файла и занесения их в массив
        string[] lines = File.ReadAllLines("PASS.TXT");
        // Цикл по каждой полученной строке.
        foreach (string line in lines)
        {
            // Разделение строки на части по символу ':'
            string[] parts = line.Split(':');


            // Проверка, что логин совпадает с логином в файле.
            if (parts[0] == login)
            {
                // Вывод сообщения об успешной идентификации.
                Console.WriteLine("Успешная идентификация!\n");
                while (true)
                {
                    // Получение пароля от пользователя.
                    string password = GetInput("Введите пароль: ");
                    // Шифрование пароля с использованием ключа.
                    string encryptedPassword = Encrypt(password, privateKey);
                    // Проверка, что зашифрованный пароль совпадает с паролем в файле.
                    if (parts[1] == encryptedPassword)
                    {
                        // Вывод сообщения об успешной аутентификация.
                        Console.WriteLine("Успешная аутентификация!\n");
                        // Завершение метода.
                        return;
                    }
                    else
                    {
                        // Вывод сообщения о неверном пароле.
                        Console.Write("Неверный пароль. Повторите попытку ввода нажав 1 " +
                                        "или введите 0 для выхода в меню: ");
                        // Читаем выбор. ? потому что, допускаем что может быть введено значение null
                        string? replay = Console.ReadLine();
                        // Если выбрано 1 - переход на следующую итерацию, где запрашивается повторный ввод
                        if (replay == "1") { continue; }
                        // Если выбрано 0, то выход в меню
                        else if (replay == "0") { return; }
                        // Иначе вывод сообщения об ошибке
                        else
                        {
                            Console.WriteLine("Ошибка! Неизвестный вариант ввода. " +
                                                "Возможно вы хотели выйти в меню.\n");
                            return;
                        }
                    }
                }
            }
        }
        // Вывод сообщения о том, что логин не найден.
        Console.WriteLine("Логин не найден. Повторите попытку ввода, зарегистрируйтесь или завершите работу.\n");
    }

    // Метод для регистрации пользователя.
    static void Register()
    {
        // Бесконечный цикл, который продолжается до тех пор, пока пользователь не введет уникальный логин.
        while (true)
        {
            // Вывод запроса на ввод логина.
            Console.Write("Введите логин: ");
            // Чтение логина, введенного пользователем. 
            // "?" потому что, допускаем что может быть введено значение null
            string? login = Console.ReadLine();
            // Если введено null или пустая строка - повтор ввода
            if (login == null || login == "") { continue; }

            // Чтение всех строк из файла и занесения их в массив
            string[] lines = File.ReadAllLines("PASS.TXT");
            // Переменная для отслеживания, существует ли логин.
            bool loginExists = false;

            // Цикл по каждой полученной строке.
            foreach (string line in lines)
            {
                // Разделение строки на части по символу ':'
                string[] parts = line.Split(':');

                // Проверка, что логин совпадает с логином в файле.
                if (parts[0] == login)
                {
                    // Установка переменной loginExists в true, если логин существует.
                    loginExists = true;
                    // Выход из цикла, если логин существует.
                    break;
                }
            }

            // Проверка, существует ли логин.
            if (loginExists)
            {
                // Вывод сообщения, что логин уже существует.
                Console.WriteLine("Этот логин уже существует. Пожалуйста, введите другой.");
            }
            else
            {
                // Вывод сообщения о требовании пароля
                Console.WriteLine("\nПароль должен содержать:\n" +
                    "Более 4 символов.\n" +
                    "Минимум 1 буква латинского алфавита.\n" +
                    "Минимум 1 цифра.\n" +
                    "Должны отсутствовать подряд повторяющиеся символы.\n" +
                    "Спец.символы запрещены.");

                // Получение пароля от пользователя.
                string password = GetInput("Введите пароль: ");
                // Шифрование пароля с использованием ключа.
                string encryptedPassword = Encrypt(password, privateKey);
                // Запись логина и зашифрованного пароля в файл.
                File.AppendAllText("PASS.TXT", $"{login}:{encryptedPassword}\n");
                // Вывод сообщения об успешной регистрации.
                Console.WriteLine("Успешная регистрация!\n");
                // Выход из цикла, если регистрация прошла успешно.
                break;
            }
        }
    }
}
